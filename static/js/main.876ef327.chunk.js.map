{"version":3,"sources":["App.js","utils.js","index.js"],"names":["App","state","web3","undefined","accounts","currentAccount","contract","balance","contractAddress","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","eth","net","getId","networkId","deployedNetwork","Escrow","networks","Contract","abi","address","getAccounts","_address","this","setState","updateBalance","methods","balanceOf","call","e","preventDefault","deposit","send","from","value","target","elements","release","_this2","react_default","createElement","className","onSubmit","htmlFor","type","id","onClick","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.876ef327.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Escrow from './contracts/Escrow.json';\nimport { getWeb3 } from './utils.js';\n\nclass App extends Component {\n  state = {\n    web3: undefined,\n    accounts: [],\n    currentAccount: undefined,\n    contract: undefined,\n    balance: undefined,\n    contractAddress: undefined\n  }\n\n  async componentDidMount() {\n    const web3 = await getWeb3();\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Escrow.networks[networkId];\n    const contract = new web3.eth.Contract(\n      Escrow.abi,\n      deployedNetwork && deployedNetwork.address,\n    );\n\n    const accounts = await web3.eth.getAccounts();\n    const contractAddress = await contract._address;\n\n    this.setState({ contractAddress });\n    this.setState({ web3, accounts, contract }, this.updateBalance);\n  };\n\n  async updateBalance() {\n    const { contract } = this.state;\n    const balance = await contract.methods.balanceOf().call();\n    this.setState({ balance });\n  };\n\n  async deposit(e) {\n    e.preventDefault();\n    const { contract, accounts } = this.state;\n    await contract.methods.deposit().send({\n      from: accounts[0],\n      value: e.target.elements[0].value\n    });\n    this.updateBalance();\n  }\n\n  async release() {\n    const { contract, accounts } = this.state;\n    await contract.methods.release().send({\n      from: accounts[0],\n    });\n    this.updateBalance();\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading... Please connect your Metamask on RINKEBY Test Network! (or GANACHE, if using local deployment)</div>;\n    }\n\n    const { balance } = this.state;\n    const { contractAddress } = this.state;\n    const { accounts } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center\">Escrow Dapp</h1>\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <p>Contract address: <b>{contractAddress}</b></p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <p>User wallet address: <b>{accounts}</b></p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <p>Deposited balance: <b>{balance}</b> wei </p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <form onSubmit={e => this.deposit(e)}>\n              <div className=\"form-group\">\n                <label htmlFor=\"deposit\">Deposit</label>\n                <input type=\"number\" className=\"form-control\" id=\"deposit\" />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n          </div>\n        </div>\n\n        <br />\n\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <button onClick={() => this.release()} type=\"submit\" className=\"btn btn-primary\">Release</button>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nexport { getWeb3 };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}